more_zs <- has_more_zs("zi", "Ziel")
print(more_zs)
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2){
if(str_count(tolower(string1), "z") > str_count(tolower(string2), "z")) {
return(string1)
} else if(str_count(tolower(string1), "z") < str_count(tolower(string2), "z")){
return(string2)
} else if(str_count(tolower(string1), "z") == 0 & str_count(tolower(string2), "z") == 0){
return("Neither string contains the letter z.")
} else {
return("The strings have the same number of Zs." )
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zi", "Ziel")
print(more_zs)
has_more_zs <- function(string1, string2){
if(str_count(tolower(string1), "z") > str_count(tolower(string2), "z")) {
return(string1)
} else if(str_count(tolower(string1), "z") < str_count(tolower(string2), "z")){
return(string2)
} else if(str_count(tolower(string1), "z") == 0 & str_count(tolower(string2), "z") == 0){
return("Neither string contains the letter z.")
} else {
return("The strings have the same number of Zs." )
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zi", "Zziel")
print(more_zs)
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2){
if(str_count(tolower(string1), "z") > str_count(tolower(string2), "z")) {
return(string1)
} else if(str_count(tolower(string1), "z") < str_count(tolower(string2), "z")){
return(string2)
} else if(str_count(tolower(string1), "z") == 0 & str_count(tolower(string2), "z") == 0){
return("Neither string contains the letter z.")
} else {
return("The strings have the same number of Zs." )
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("i", "el")
print(more_zs)
more_zs <- has_more_zs("i", "el")
print(more_zs)
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
return(gsub("[0-9]+", "", strings))
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
classes <- c("INFO 201", "CSE 142")
print(remove_digits(classes))
classes <- c("INFO 201", "CSE 142")
remove_digits(classes)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter","Star War", "kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
print(top_three)
classes <- c("INFO 201", "CSE 142")
remove_digits(classes)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter","Star War","kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
print(top_three)
movies <- c("Harry Potter", "Star War","kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie")
print(excited)
movies <- c("Harry Potter", "Star War","kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie", sep = " ")
print(excited)
classes <- c("INFO 201", "CSE 142")
remove_digits(classes)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Harry Potter", "Star War","kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie", sep = "")
print(excited)
movies <- c("Harry Potter", "Star War", "kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie")
print(excited)
movies <- c("Harry Potter", "Star War", "kiss", "Avenger", "Star Treck", "Joker")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1,2,3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste0(movies, " is a great movie")
print(excited)
without_four <- movies[-4]
print(without_four)
m <- c(24,56,16)
l <- m[m % 8 == 0]
l <- m[m<0]
8 %8
8 %% 8
l <- m[m %% 8 ==0]
print(l)
numbers <- 1:10
filter <- numbers
filter <- numbers[numbers %%2 ==0]
print(filter)
summarize_vector <- function(numbers){
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
}
summarize_vector <- function(numbers){
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
}
summarize_vector <- function(numbers){
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
summarize_vector <- function(numbers){
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
print(summary_1_to_100)
install.packages("lintr")
install.packages("styler")
library(lintr)
library(styler)
style_file("analysis.R")
install.packages("carData")
install.packages("carData")
install.packages("pscl")
install.packages("nycflights13")
install.packages("tidyr")
```{r echo = TRUE, eval = T}
library(ggplot2)
head(scale, 8)
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
library(ggplot2)
head(scale, 8)
```
### Conclusions
My conclusions
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
library(ggplot2)
head(scale, 8)
```
### Conclusions
My conclusions go here
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
library(ggplot2)
head(scale, 8)
```
### Conclusions
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
library(ggplot2)
head(mpg, 8)
```
### Conclusions
mpg
View(mpg)
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
library(ggplot2)
head(mpg, 8)
```
### Conclusions
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
head(mpg, 8)
```
### Conclusions
now
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
qplot(data = mpg, x = displ)
```
### Conclusions
now
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
qplot(data = mpg, x = displ)
```
### Conclusions
---
title: "R Notebook"
output: html_notebook
---
### Heading 1
```{r echo = TRUE, eval = TRUE}
qplot(data = mpg, x = displ)
```
### Conclusions
qplot(data = mpg, x = displ)
qplot(data = mpg, x = displ)
library(gplot2)
library(qplot2)
library(ggplot2)
head(mpg, 8)
qplot(data = mpg, x = displ)
library(ggplot2)
head(mpg, 8)
qplot(data = mpg, x = displ)
library(ggplot2)
head(mpg, 8)
qplot(data = mpg, x = displ)
library(ggplot2)
head(mpg, 8)
qplot(data = mpg, x = displ)
library(ggplot2)
head(mpg, 8)
qplot(data = mpg, x = displ)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
top10_danger_state <- shoot_df %>%
arrange(-num_impacted) %>%
top_n(10, wt = num_impacted)
shiny::runApp('C:/Users/zhaos/Desktop/info201/info201-project/docs')
install.packages("ggmap")
install.packages("ggmap")
shiny::runApp('C:/Users/zhaos/Desktop/info201/info201-project/docs')
runApp('C:/Users/zhaos/Desktop/info201/info201-project/docs')
runApp('C:/Users/zhaos/Desktop/info201/info201-project/docs')
runApp('C:/Users/zhaos/Desktop/info201/info201-project/docs')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='info201',
token='16A160BE1F014EB62F8A3C47375B4024',
secret='<SECRET>')
rsconnect::setAccountInfo(name='info201',
token='16A160BE1F014EB62F8A3C47375B4024',
secret='<SECRET>')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='info201',
token='16A160BE1F014EB62F8A3C47375B4024',
secret='<SECRET>')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
runApp('C:/Users/zhaos/Desktop/info201/info201-project/docs')
rsconnect::setAccountInfo(name='info201',
token='16A160BE1F014EB62F8A3C47375B4024',
secret='<SECRET>')
shiny::runApp('C:/Users/zhaos/Desktop/info201/info201-project')
runApp('C:/Users/zhaos/Desktop/info201/info201-project')
runApp('C:/Users/zhaos/Desktop/info201/info201-project')
runApp('C:/Users/zhaos/Desktop/info201/info201-project')
runApp('C:/Users/zhaos/Desktop/info201/info201-project')
runApp('info201-project')
runApp('C:/Users/zhaos/Desktop/info201/info201-project/info201-project')
library("styler")
style_file("app.R")
lintr:::addin_lint()
library("lintr")
lint_dir("app.R")
style_file("app.R")
1/e
1/exp
1/exp(1)
ln(0.2^2+1/exp(1))+1
-1+0.08exp(1)+0.16exp(1-0.08e)
0.08exp(1)
0.08exp
exp(1)
o.08*exp(1)
0.08exp(1)
0.2exp
0.2exp(1)
0.08*exp(1)
> -1+0.08*exp(1)+0.16exp(1-0.08exp(1))
-1+0.08*exp(1)+0.16exp(1-0.08exp(1))
-1+0.08*exp(1)+0.16exp(1-0.08*exp(1))
-1+0.08*exp(1)+0.16*exp(1-0.08*exp(1))
LN(10)
Ln(10)
ln(10)
Ln(10)
-1+0.08*exp(1)+0.16*exp(1-0.08*exp(1))
-1+0.08*exp(1)+0.16*exp(1-0.08*exp(1))+0.24*exp(1-0.08*exp(1)-0.16*exp(1-0.08*exp(1)))+0.32*exp(1-0.08*exp(1)-0.16*exp(1-0.08*exp(1))-0.24*exp(1-0.08*exp(1)-0.16*exp(1-0.08*exp(1))))
install.packages('installr')
library(installr)
updateR()
install.packages("remotes")
library(remotes)
remotes::install_github("GuangchuangYu/nCov-2019")
library(remotes)
remotes::install_github("GuangchuangYu/nCov-2019")
install_github("GuangchuangYu/nCov-2019")
install_github("GuangchuangYu/nCov-2019")
install.packages(dplyr)
install.packages("dplyr")
install.packages()
?install.packages
install.packages(httr)
install.packages("httr")
install_github("GuangchuangYu/nCov-2019")
remote::install_github("GuangchuangYu/nCov-2019")
remotes::install_github("GuangchuangYu/nCov-2019")
library(remotes)
remotes::install_github("GuangchuangYu/nCov- 2019")
remotes::install_github("GuangchuangYu/nCov-2019")
remotes::install_github("Guangchuang Yu/nCov-2019")
remotes::install_github("GuangchuangYu/nCov-2019")
remotes::install_github("GuangchuangYu/nCov2019")
get_nCov2019()
get_nCov2019()
library("nCov2019")
x <- get_nCov2019()
View(x)
y <- load_nCov2019()
View(y)
View(y[[privince]])
y["province"]
y[[province]]
y["data"]
View(y["data"])
setwd("C:/Users/zhaos/OneDrive/Desktop/COVID-19")
library("dplyr")
library("remotes")
library("leaflet")
library("ggplot2")
library("plotly")
library("knitr")
# Load data
Excel_trend <- read.csv("./data/Excel_trend.csv",
header = TRUE,
stringsAsFactors = FALSE)
Zoom_trend <- read.csv("./data/Zoom_trend.csv",
header = TRUE,
stringsAsFactors = FALSE)
Telecommuting_trend <- read.csv("./data/Telecommuting_trend.csv",
header = TRUE,
stringsAsFactors = FALSE)
Telecommuting_trend <- read.csv("./data/Telecommuting_trend.csv",
header = TRUE,
stringsAsFactors = FALSE)
travel_Shanghai <- read.csv("./data/Shanghai.csv",
header = TRUE,
stringsAsFactors = FALSE)
travel_Beijing <- read.csv("./data/Beijing.csv",
header = TRUE,
stringsAsFactors = FALSE)
travel_Guangzhou <- read.csv("./data/Guangzhou.csv",
header = TRUE,
stringsAsFactors = FALSE)
travel_Naning <- read.csv("./data/Naning.csv",
header = TRUE,
stringsAsFactors = FALSE)
travel_Guiyang <- read.csv("./data/Guiyang.csv",
header = TRUE,
stringsAsFactors = FALSE)
travel_Wuxi <- read.csv("./data/Wuxi.csv",
header = TRUE,
stringsAsFactors = FALSE)
travel_Wuhan <- read.csv("./data/Wuhan.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Plot of Excel
plot_Excel <- ggplot()+geom_line(data = Excel_trend,aes(x = as.Date(date),y = confirmed,colour = "Confirmed Case"),size=0.6)+
geom_line(data = Excel_trend,aes(x = as.Date(date),y = search_intensity,colour = "Excel"),size=0.6) +
geom_point(data = Excel_trend,aes(x = as.Date(date),y = search_intensity,colour = "Excel"),size= 0.7) +
geom_point(data = Excel_trend,aes(x = as.Date(date),y = confirmed,colour = "Confirmed Case"),size=0.7) +
ylab("Frequency")+ xlab("Date") +
theme(text=element_text(size= 9)) #+
#ggtitle("Search Intensity of Excel")
plotly_Excel <- ggplotly(plot_Excel)
# Plot of Zoom
plot_Zoom <- ggplot()+geom_line(data = Zoom_trend,aes(x = as.Date(date),y = confirmed,colour = "Confirmed Case"),size= 0.6)+
geom_line(data = Zoom_trend,aes(x = as.Date(date),y = search_intensity,colour = "Zoom"),size= 0.6) +
geom_point(data = Zoom_trend,aes(x = as.Date(date),y = search_intensity,colour = "Zoom"),size= 0.7) +
geom_point(data = Zoom_trend,aes(x = as.Date(date),y = confirmed,colour = "Confirmed Case"),size=0.7) +
ylab("Frequency")+ xlab("Date") +
theme(text=element_text(size=9)) #+
#ggtitle("Search Intensity of Zoom")
plotly_Zoom <- ggplotly(plot_Zoom)
# Plot of telecommuting
plot_Telecommuting <- ggplot()+geom_line(data = Telecommuting_trend,aes(x = as.Date(date),y = confirmed,colour = "Confirmed Case"),size= 0.6)+
geom_line(data = Telecommuting_trend,aes(x = as.Date(date),y = search_intensity,colour = "Telecommuting"),size= 0.6) +
geom_point(data = Telecommuting_trend,aes(x = as.Date(date),y = search_intensity,colour = "Telecommuting"),size= 0.7) +
geom_point(data = Telecommuting_trend,aes(x = as.Date(date),y = confirmed,colour = "Confirmed Case"),size=0.7) +
ylab("Frequency")+ xlab("Date") +
theme(text=element_text(size=9)) #+
#ggtitle("Search Intensity of Telecommuting")
plotly_Telecommuting <- ggplotly(plot_Telecommuting)
# plot of intracity traffic intensity in Wuhan
plot_Wuhan <- ggplot()+geom_line(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity1,colour = "intensity in 2020"),size=0.6) +
geom_point(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity1,colour = "intensity in 2020"),size= 0.7) +
geom_line(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity2,colour = "intensity in 1999"),size=0.6) +
geom_point(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity2, colour = "intensity in 1999"),size= 0.7)
plotly_Wuhan <- ggplotly(plot_Wuhan)
# plot of intracity traffic intensity in Shanghai
plot_Shanghai <- ggplot()+geom_line(data = travel_Shanghai,aes(x = as.Date(date1),y = intensity1,colour = "intensity in 2020"),size=0.6) +
geom_point(data = travel_Shanghai,aes(x = as.Date(date1),y = intensity1,colour = "intensity in 2020"),size= 0.7) +
geom_line(data = travel_Shanghai,aes(x = as.Date(date1),y = intensity2,colour = "intensity in 1999"),size=0.6) +
geom_point(data = travel_Shanghai,aes(x = as.Date(date1),y = intensity2, colour = "intensity in 1999"),size= 0.7)
plotly_Shanghai <- ggplotly(plot_Shanghai)
plotly_Shanghai
plotly_Wuhan
plot_Wuhan <- ggplot()+geom_line(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity1,colour = "intensity in 2020"),size=0.6) +
geom_point(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity1,colour = "intensity in 2020"),size= 0.7) +
geom_line(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity2,colour = "intensity in 1999"),size=0.6) +
geom_point(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity2, colour = "intensity in 1999"),size= 0.7) +
ylab("intensity")+ xlab("Date") +
theme(text=element_text(size=9)) +
ggtitle("Intra Travel Intensity of Wuhan")
plotly_Wuhan <- ggplotly(plot_Wuhan)
plot_Wuhan <- ggplot()+geom_line(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity1,colour = "intensity in 2020"),size=0.6) +
geom_point(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity1,colour = "intensity in 2020"),size= 0.7) +
geom_line(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity2,colour = "intensity in 1999"),size=0.6) +
geom_point(data = travel_Wuhan,aes(x = as.Date(date1),y = intensity2, colour = "intensity in 1999"),size= 0.7) +
ylab("intensity")+ xlab("Date") +
theme(text=element_text(size=9)) +
ggtitle("Intra Travel Intensity of Wuhan")
plotly_Wuhan <- ggplotly(plot_Wuhan)
# plot of intracity traffic intensity in Shanghai
plot_Shanghai <- ggplot()+geom_line(data = travel_Shanghai,aes(x = as.Date(date1),y = intensity1,colour = "intensity in 2020"),size=0.6) +
geom_point(data = travel_Shanghai,aes(x = as.Date(date1),y = intensity1,colour = "intensity in 2020"),size= 0.7) +
geom_line(data = travel_Shanghai,aes(x = as.Date(date1),y = intensity2,colour = "intensity in 1999"),size=0.6) +
geom_point(data = travel_Shanghai,aes(x = as.Date(date1),y = intensity2, colour = "intensity in 1999"),size= 0.7) +
ylab("intensity")+ xlab("Date") +
theme(text=element_text(size=9)) +
ggtitle("Intra Travel Intensity of Shanghai")
plotly_Shanghai <- ggplotly(plot_Shanghai)
